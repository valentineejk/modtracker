package main

import (
	"bytes"
	"fmt"
	"log"

	"github.com/spf13/viper"
)

// Config struct to hold the configuration values
type Config struct {
	Port      string `mapstructure:"PORT" validate:"required,numeric"`
	Frequency int    `mapstructure:"FREQUENCY" validate:"required,gt=0"`
	Endpoint  string `mapstructure:"ENDPOINT" validate:"required,url"`
	Directory string `mapstructure:"DIRECTORY" validate:"required,dirpath"`
}

//NOTE ABOUT CONFIG,  CONFIG FUNCTINS READS  EMBEDED RESOURCE (resourceAppEnv),
// WHICH IS BUNDLED USING FYNE "fyne bundle command:.
// from an in-memory buffer representing the app.env file ".

func LoadConfig(path string) (*Config, error) {

	log.Println("path: ", path)
	// `resourceAppEnv` is automatically generated by fyne bundle
	if resourceAppEnv == nil {
		return nil, fmt.Errorf("no embedded resource found")
	}

	// Load the embedded resource content into a buffer
	envContent := bytes.NewReader(resourceAppEnv.Content())

	// Viper can read the config directly from the buffer
	viper.SetConfigType("env")
	if err := viper.ReadConfig(envContent); err != nil {
		return nil, fmt.Errorf("error reading embedded app.env: %v", err)
	}

	// Unmarshal the config values into your Config struct
	var config Config
	if err := viper.Unmarshal(&config); err != nil {
		return nil, fmt.Errorf("unable to decode into struct: %v", err)
	}

	return &config, nil
}
